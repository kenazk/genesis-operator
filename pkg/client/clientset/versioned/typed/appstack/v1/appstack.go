/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/kenazk/genesis-operator/pkg/apis/appstack/v1"
	scheme "github.com/kenazk/genesis-operator/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// AppStacksGetter has a method to return a AppStackInterface.
// A group's client should implement this interface.
type AppStacksGetter interface {
	AppStacks(namespace string) AppStackInterface
}

// AppStackInterface has methods to work with AppStack resources.
type AppStackInterface interface {
	Create(*v1.AppStack) (*v1.AppStack, error)
	Update(*v1.AppStack) (*v1.AppStack, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.AppStack, error)
	List(opts metav1.ListOptions) (*v1.AppStackList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.AppStack, err error)
	AppStackExpansion
}

// appStacks implements AppStackInterface
type appStacks struct {
	client rest.Interface
	ns     string
}

// newAppStacks returns a AppStacks
func newAppStacks(c *PuppetV1Client, namespace string) *appStacks {
	return &appStacks{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the appStack, and returns the corresponding appStack object, and an error if there is any.
func (c *appStacks) Get(name string, options metav1.GetOptions) (result *v1.AppStack, err error) {
	result = &v1.AppStack{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("appstacks").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of AppStacks that match those selectors.
func (c *appStacks) List(opts metav1.ListOptions) (result *v1.AppStackList, err error) {
	result = &v1.AppStackList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("appstacks").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested appStacks.
func (c *appStacks) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("appstacks").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a appStack and creates it.  Returns the server's representation of the appStack, and an error, if there is any.
func (c *appStacks) Create(appStack *v1.AppStack) (result *v1.AppStack, err error) {
	result = &v1.AppStack{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("appstacks").
		Body(appStack).
		Do().
		Into(result)
	return
}

// Update takes the representation of a appStack and updates it. Returns the server's representation of the appStack, and an error, if there is any.
func (c *appStacks) Update(appStack *v1.AppStack) (result *v1.AppStack, err error) {
	result = &v1.AppStack{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("appstacks").
		Name(appStack.Name).
		Body(appStack).
		Do().
		Into(result)
	return
}

// Delete takes name of the appStack and deletes it. Returns an error if one occurs.
func (c *appStacks) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("appstacks").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *appStacks) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("appstacks").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched appStack.
func (c *appStacks) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.AppStack, err error) {
	result = &v1.AppStack{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("appstacks").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
